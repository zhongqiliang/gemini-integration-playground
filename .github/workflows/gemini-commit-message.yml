name: 'Gemini Commit Message Generator'

# This workflow is triggered when a new comment is created on a Pull Request.
on:
  issue_comment:
    types: [created]

# This block defines the job that will run.
jobs:
  generate_commit_message:
    # This condition ensures the workflow only runs if the comment is on a PR
    # and the comment body is exactly '/gemini-commit-message'.
    if: github.event.issue.pull_request && github.event.comment.body == '/gemini-commit-message'
    
    # The workflow will run on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    
    # We need to grant the workflow permission to write comments on pull requests.
    permissions:
      pull-requests: write

    steps:
      # Step 1: Get the code changes (the "diff") from the pull request.
      # This is the most important piece of information for generating a good commit message.
      - name: 'Get PR Diff'
        id: diff
        run: |
          set -eux
          # Fetch the diff content directly from the PR's diff URL.
          # This is much faster than checking out the repo and running git diff.
          diff_content=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3.diff" ${{ github.event.issue.pull_request.url }})
          
          # --- DEBUGGING STEP ---
          # Print the raw diff content to the logs.
          echo "--- PR DIFF CONTENT ---"
          echo "$diff_content"
          echo "--- END PR DIFF CONTENT ---"

          # The following lines save the diff content into a GitHub Actions output variable,
          # which allows us to use it in later steps. This method is robust for multiline strings.
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$diff_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 2: Call the Gemini API directly with a detailed prompt.
      # This approach avoids third-party actions and gives us full control over the request.
      - name: 'Generate Commit Message with Gemini'
        id: gemini
        run: |
          set -eux
          # Read the static prompt template from the new markdown file.
          PROMPT_TEMPLATE=$(cat .github/workflows/commit-message-instruction.md)

          # Use a HEREDOC to combine the template with the dynamic pull request info.
          FINAL_PROMPT=$(cat <<EOF
          $PROMPT_TEMPLATE

          **Analyze the following pull request information and generate the commit message:**

          **Pull Request URL:** ${{ github.event.issue.html_url }}
          **Pull Request Title:** ${{ github.event.issue.title }}
          **Original PR Description:** ${{ github.event.issue.body }}
          **Code Diff to Analyze:** ${{ steps.diff.outputs.diff_content }}
          EOF
          )

          # Use jq to safely construct the JSON payload.
          json_payload=$(jq -n --arg prompt "$FINAL_PROMPT" '{ "contents": [ { "parts": [ { "text": $prompt } ] } ] }')

          # Make the API call to the Gemini model using curl.
          api_response=$(curl -fsSL -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$json_payload")

          # Extract only the text content from the API's JSON response.
          gemini_text_response=$(echo "$api_response" | jq -r '.candidates[0].content.parts[0].text // "Error: Could not parse a valid response from the Gemini API. Please check the API response logs in the workflow run."')

          # Set the final text as an output variable for the next step.
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$gemini_text_response" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 3: Post Gemini's generated commit message back to the PR.
      # This step now uses the direct response from the Gemini step.
      - name: 'Post Commit Message as Comment'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `### ðŸ¤– Gemini Suggested Commit Message\n\n---\n\n\`\`\`\n${{ steps.gemini.outputs.response }}\n\`\`\``;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
